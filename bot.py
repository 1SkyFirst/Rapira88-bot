import os
import json
import threading
import psutil
import sys
from datetime import datetime
import pytz
import telebot
from telebot import types

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    print("‚ùå TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

os.makedirs("/data", exist_ok=True)
DATA_FILE = "/data/data.json" if os.path.exists("/data") else "data.json"
USERS_FILE = "/data/users.json" if os.path.exists("/data") else "users.json"
PORT = int(os.getenv("PORT", 8000))
ADMINS = [1088460844, 328477968, 7028005668]
TZ = pytz.timezone("Europe/Moscow")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# === –ê–ù–¢–ò–î–£–ë–õ–ò–ö–ê–¢ ===
def already_running():
    current = psutil.Process().pid
    for proc in psutil.process_iter(['pid', 'cmdline']):
        try:
            if proc.pid != current and 'python' in ' '.join(proc.info.get('cmdline') or []) and 'bot.py' in ' '.join(proc.info.get('cmdline') or []):
                return True
        except Exception:
            continue
    return False
if already_running():
    print("‚ö†Ô∏è Bot already running, exiting duplicate instance.")
    sys.exit(0)

# === KEEPALIVE (–¥–ª—è Timeweb) ===
def keepalive():
    from flask import Flask
    app = Flask(__name__)
    @app.route("/")
    def index(): return "Bot alive!", 200
    app.run(host="0.0.0.0", port=PORT)
threading.Thread(target=keepalive, daemon=True).start()

# === –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ===
DEFAULT_ITEMS = {
    "–°–û–õ–ï–î–ê–†": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–í–õ–ê–î–ò–ú–ò–†–û–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ü–û–ö–†–û–í–°–ö–û–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ë–ï–õ–ì–û–†–û–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–Ø–ö–û–í–õ–ï–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ü–û–ü–ê–°–ù–ê–Ø": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ö–ê–ú–´–®–ï–í–ê–•–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ë–ï–†–ï–°–¢–û–í–û–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–¢–†–ò–ü–û–õ–¨–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
}

def load_json(path, default):
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f: json.dump(default, f, ensure_ascii=False, indent=2)
        return default
    try:
        with open(path, "r", encoding="utf-8") as f: return json.load(f)
    except Exception: return default

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f: json.dump(data, f, ensure_ascii=False, indent=2)

menu_items = load_json(DATA_FILE, DEFAULT_ITEMS)
subscribers = load_json(USERS_FILE, [])

def save_data(): save_json(DATA_FILE, menu_items)
def save_users(): save_json(USERS_FILE, subscribers)

def is_admin(uid): return uid in ADMINS

# === –ü–û–ú–û–©–ù–ò–ö–ò ===
def status_emoji(val):
    if val == "–ß–ò–°–¢–û": return "üü©"
    elif val == "–ì–†–Ø–ó–ù–û": return "üü•"
    else: return "‚¨ú"

def build_keyboard(items, uid=None, admin=False):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for i, (name, info) in enumerate(items.items(), 1):
        label = f"{status_emoji(info['value'])} {name}" if admin else name
        row.append(types.KeyboardButton(label))
        if len(row) == 2:
            kb.row(*row)
            row = []
    if row: kb.row(*row)
    if admin:
        kb.row(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"), types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

# === –°–û–û–ë–©–ï–ù–ò–Ø ===
def send_menu(chat_id, uid=None):
    kb = build_keyboard(menu_items, uid, admin=is_admin(uid))
    if is_admin(uid):
        bot.send_message(chat_id, "üß∞ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n(–Ω–∞–∂–º–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞)", reply_markup=kb)
    else:
        bot.send_message(chat_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=kb)

# === –°–¢–ê–†–¢ ===
@bot.message_handler(commands=["start"])
def start(m):
    uid = m.from_user.id
    if uid not in subscribers:
        subscribers.append(uid)
        save_users()
    send_menu(m.chat.id, uid)

# === –ê–î–ú–ò–ù-–ö–õ–ê–í–ò–®–ê ===
@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –†–∞–ø–∏—Ä–∞" or m.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def admin_panel(m):
    if not is_admin(m.from_user.id):
        return bot.send_message(m.chat.id, "üö´ –ù–µ—Ç –ø—Ä–∞–≤.")
    send_menu(m.chat.id, m.from_user.id)

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô ===
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_prompt(m):
    if not is_admin(m.from_user.id): return
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞:")
    bot.register_next_step_handler(m, add_new)

def add_new(m):
    key = m.text.strip().upper()
    if key in menu_items:
        bot.send_message(m.chat.id, "‚ö†Ô∏è –¢–∞–∫–æ–π –ø—É–Ω–∫—Ç —É–∂–µ –µ—Å—Ç—å.")
    else:
        menu_items[key] = {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None}
        save_data()
        bot.send_message(m.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É–Ω–∫—Ç <b>{key}</b>.")
    send_menu(m.chat.id, m.from_user.id)

# === –ù–ê–ó–ê–î ===
@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back(m):
    bot.send_message(m.chat.id, "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é.")
    send_menu(m.chat.id, m.from_user.id)

# === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í ===
@bot.message_handler(func=lambda m: any(name in m.text for name in menu_items.keys()))
def toggle_status(m):
    uid = m.from_user.id
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
    if not is_admin(uid):
        key = next((name for name in menu_items if name in m.text), None)
        if key:
            val = menu_items[key]["value"]
            updated = menu_items[key].get("updated")
            ts = f"\nüïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {updated}" if updated else ""
            bot.send_message(m.chat.id, f"{key}: <b>{val}</b>{ts}")
        return

    key = next((name for name in menu_items if name in m.text), None)
    if not key: return

    current = menu_items[key]["value"]
    if current == "–ß–ò–°–¢–û":
        new_val = "–ì–†–Ø–ó–ù–û"
    elif current == "–ì–†–Ø–ó–ù–û":
        new_val = "–ß–ò–°–¢–û"
    else:
        new_val = "–ß–ò–°–¢–û"

    ts = datetime.now(TZ).strftime("%d.%m.%Y %H:%M")
    menu_items[key] = {"value": new_val, "updated": ts}
    save_data()

    emoji = status_emoji(new_val)
    text = f"{emoji} <b>{key}</b>: {new_val}\nüïì {ts}"
    for uid2 in list(subscribers):
        try:
            bot.send_message(uid2, text, parse_mode="HTML")
        except Exception as e:
            if "Forbidden" in str(e) or "bot was blocked" in str(e):
                subscribers.remove(uid2)
                save_users()

    bot.send_message(m.chat.id, f"‚úÖ {key}: {emoji} {new_val}")
    send_menu(m.chat.id, m.from_user.id)

# === –ü–†–û–ß–ï–ï ===
@bot.message_handler(func=lambda m: True)
def fallback(m):
    send_menu(m.chat.id, m.from_user.id)

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏.")
bot.infinity_polling(skip_pending=True)
