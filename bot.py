import os
import json
import threading
import psutil
import sys
import time
from datetime import datetime
from http.server import SimpleHTTPRequestHandler, HTTPServer
import telebot
from telebot import types

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–∞ –ú–æ—Å–∫–≤—É
os.environ['TZ'] = 'Europe/Moscow'
try:
    time.tzset()
except Exception:
    pass

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    print("‚ùå TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

# –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è Timeweb (/data)
os.makedirs("/data", exist_ok=True)
DATA_FILE = "/data/data.json" if os.path.exists("/data") else "data.json"
USERS_FILE = "/data/users.json" if os.path.exists("/data") else "users.json"

PORT = int(os.getenv("PORT", 8000))
ADMINS = [1088460844, 328477968, 7028005668]

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
admin_sessions = {}

# === –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í ===
def already_running():
    current = psutil.Process().pid
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.pid != current and 'python' in (proc.name() or '').lower() and 'bot.py' in ' '.join(proc.info.get('cmdline') or []):
                return True
        except Exception:
            continue
    return False

if already_running():
    print("‚ö†Ô∏è Bot already running, exiting duplicate instance.")
    sys.exit(0)

# === HTTP KEEPALIVE (—á—Ç–æ–±—ã Timeweb –≤–∏–¥–µ–ª –ø–æ—Ä—Ç) ===
def keepalive():
    from flask import Flask
    app = Flask(__name__)

    @app.route("/")
    def index():
        return "Bot is alive!", 200

    app.run(host="0.0.0.0", port=PORT)

threading.Thread(target=keepalive, daemon=True).start()

# === –î–ê–ù–ù–´–ï ===
DEFAULT_ITEMS = {
    "–°–û–õ–ï–î–ê–†": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–í–õ–ê–î–ò–ú–ò–†–û–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ü–û–ö–†–û–í–°–ö–û–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ë–ï–õ–ì–û–†–û–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–Ø–ö–û–í–õ–ï–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ü–û–ü–ê–°–ù–ê–Ø": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ö–ê–ú–´–®–ï–í–ê–•–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ë–ï–†–ï–°–¢–û–í–û–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–¢–†–ò–ü–û–õ–¨–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None}
}

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_json(path, default):
    if not os.path.exists(path):
        save_json(path, default)
        return default
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

menu_items = load_json(DATA_FILE, DEFAULT_ITEMS)
subscribers = load_json(USERS_FILE, [])

def save_data():
    save_json(DATA_FILE, menu_items)

def save_users():
    save_json(USERS_FILE, subscribers)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===
def is_admin(uid):
    return uid in ADMINS

def build_keyboard_two_per_row(labels, extra_last_row=None):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for i, name in enumerate(labels, 1):
        row.append(types.KeyboardButton(name))
        if len(row) == 2:
            kb.row(*row)
            row = []
    if row:
        kb.row(*row)
    if extra_last_row:
        kb.row(*[types.KeyboardButton(x) for x in extra_last_row])
    return kb

def send_menu(chat_id, uid=None):
    kb = build_keyboard_two_per_row(list(menu_items.keys()),
                                    extra_last_row=(["‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"] if is_admin(uid) else None))
    bot.send_message(chat_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=kb)

# === –°–¢–ê–†–¢ ===
@bot.message_handler(commands=['start'])
def start(m):
    uid = m.from_user.id
    if uid not in subscribers:
        subscribers.append(uid)
        save_users()
        print(f"üë§ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {uid}")
    send_menu(m.chat.id, uid)

# === –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ===
@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def admin_panel(m):
    if not is_admin(m.from_user.id):
        return bot.send_message(m.chat.id, "üö´ –ù–µ—Ç –ø—Ä–∞–≤.")
    kb = build_keyboard_two_per_row(["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"], extra_last_row=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
    bot.send_message(m.chat.id, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back(m):
    admin_sessions.pop(m.from_user.id, None)
    send_menu(m.chat.id, m.from_user.id)

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï ===
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_prompt(m):
    if not is_admin(m.from_user.id):
        return
    admin_sessions[m.from_user.id] = {"mode": "add"}
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏</b>:", parse_mode="HTML")

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and admin_sessions.get(m.from_user.id, {}).get("mode") == "add")
def add_new(m):
    key = (m.text or "").strip()
    if not key:
        bot.send_message(m.chat.id, "‚ùó –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
    elif key in menu_items:
        bot.send_message(m.chat.id, "‚ö†Ô∏è –¢–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å.")
    else:
        menu_items[key] = {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None}
        save_data()
        bot.send_message(m.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ <b>{key}</b>.", parse_mode="HTML")
    admin_sessions.pop(m.from_user.id, None)
    send_menu(m.chat.id, m.from_user.id)

# === –ò–ó–ú–ï–ù–ï–ù–ò–ï ===
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
def edit_prompt(m):
    if not is_admin(m.from_user.id):
        return
    admin_sessions[m.from_user.id] = {"mode": "edit"}
    kb = build_keyboard_two_per_row(list(menu_items.keys()), extra_last_row=["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and admin_sessions.get(m.from_user.id, {}).get("mode") == "edit")
def edit_item(m):
    key = (m.text or "").strip()
    if key not in menu_items:
        return bot.send_message(m.chat.id, "‚ùó –¢–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç.")
    admin_sessions[m.from_user.id] = {"mode": "set", "key": key}
    ikb = types.InlineKeyboardMarkup()
    ikb.row(
        types.InlineKeyboardButton("‚úÖ –ß–ò–°–¢–û", callback_data=f"s|{key}|C"),
        types.InlineKeyboardButton("üí¶ –ì–†–Ø–ó–ù–û", callback_data=f"s|{key}|D"),
        types.InlineKeyboardButton("‚ùî –ù–ï–ò–ó–í–ï–°–¢–ù–û", callback_data=f"s|{key}|U")
    )
    current = menu_items[key]["value"]
    updated = menu_items[key]["updated"]
    updated_text = f"\nüïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {updated}" if updated else ""
    bot.send_message(
        m.chat.id,
        f"–ò–∑–º–µ–Ω—è–µ–º <b>{key}</b>\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current}</b>{updated_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=ikb
    )

# === –£–°–¢–ê–ù–û–í–ö–ê –°–¢–ê–¢–£–°–ê ===
@bot.callback_query_handler(func=lambda c: c.data.startswith("s|"))
def on_set(c):
    try:
        _, key, flag = c.data.split("|", 2)
        if key not in menu_items:
            return bot.answer_callback_query(c.id, "–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        val = "–ß–ò–°–¢–û" if flag == "C" else "–ì–†–Ø–ó–ù–û" if flag == "D" else "–ù–ï–ò–ó–í–ï–°–¢–ù–û"
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        menu_items[key] = {"value": val, "updated": timestamp}
        save_data()

        text = f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n{key}: <b>{val}</b>\nüïì {timestamp}"
        for uid in list(subscribers):
            try:
                bot.send_message(uid, text, parse_mode="HTML")
            except Exception as e:
                if "Forbidden" in str(e) or "bot was blocked" in str(e):
                    subscribers.remove(uid)
                    save_users()

        bot.answer_callback_query(c.id, f"{key} ‚Üí {val}")
        bot.send_message(c.message.chat.id, f"‚úÖ {key}: <b>{val}</b>", parse_mode="HTML")
        admin_sessions.pop(c.from_user.id, None)
        send_menu(c.message.chat.id, c.from_user.id)

    except Exception as e:
        bot.answer_callback_query(c.id, f"–û—à–∏–±–∫–∞: {e}")

# === –ü–†–û–°–ú–û–¢–† ===
@bot.message_handler(func=lambda m: (m.text in menu_items) and not (is_admin(m.from_user.id) and admin_sessions.get(m.from_user.id, {}).get("mode") in ("edit","set")))
def show_item(m):
    item = menu_items[m.text]
    val = item["value"]
    updated = item.get("updated")
    if updated:
        bot.send_message(m.chat.id, f"{m.text}: <b>{val}</b>\nüïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {updated}")
    else:
        bot.send_message(m.chat.id, f"{m.text}: <b>{val}</b>\nüïì –ï—â—ë –Ω–µ –∏–∑–º–µ–Ω—è–ª–æ—Å—å")

# === –ü–†–û–ß–ï–ï ===
@bot.message_handler(func=lambda m: True)
def fallback(m):
    bot.send_message(m.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
    send_menu(m.chat.id, m.from_user.id)

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ /data).")
bot.infinity_polling(skip_pending=True)
