import os
import sys
import json
import threading
import psutil
import pytz
from datetime import datetime
import telebot
from telebot import types

# ==== –í–†–ï–ú–Ø (MSK/pytz) ====
MSK = pytz.timezone("Europe/Moscow")
def now_str():
    return datetime.now(MSK).strftime("%d.%m.%Y %H:%M")

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    print("‚ùå TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    sys.exit(1)

os.makedirs("/data", exist_ok=True)
DATA_FILE = "/data/data.json" if os.path.exists("/data") else "data.json"
USERS_FILE = "/data/users.json" if os.path.exists("/data") else "users.json"
PORT = int(os.getenv("PORT", 8000))
ADMINS = [1088460844, 328477968, 7028005668]

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# ==== –ê–ù–¢–ò-–î–£–ë–õ–ò–ö–ê–¢ ====
def already_running():
    me = psutil.Process().pid
    for p in psutil.process_iter(['pid','name','cmdline']):
        try:
            if p.pid != me and 'python' in (p.name() or '').lower() and 'bot.py' in ' '.join(p.info.get('cmdline') or []):
                return True
        except Exception:
            pass
    return False

if already_running():
    print("‚ö†Ô∏è –í—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä ‚Äî –≤—ã—Ö–æ–∂—É.")
    sys.exit(0)

# ==== KEEPALIVE –î–õ–Ø TIMEWEB ====
def keepalive():
    from flask import Flask
    app = Flask(__name__)
    @app.get("/")
    def ok():
        return "Bot is alive!", 200
    app.run(host="0.0.0.0", port=PORT)
threading.Thread(target=keepalive, daemon=True).start()

# ==== –î–ê–ù–ù–´–ï ====
DEFAULT_ITEMS = {
    "–°–û–õ–ï–î–ê–†": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–í–õ–ê–î–ò–ú–ò–†–û–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ü–û–ö–†–û–í–°–ö–û–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ë–ï–õ–ì–û–†–û–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–Ø–ö–û–í–õ–ï–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ü–û–ü–ê–°–ù–ê–Ø": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ö–ê–ú–´–®–ï–í–ê–•–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ë–ï–†–ï–°–¢–û–í–û–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–¢–†–ò–ü–û–õ–¨–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None}
}

def load_json(path, default):
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False, indent=2)
        return default
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

menu = load_json(DATA_FILE, DEFAULT_ITEMS)
users = load_json(USERS_FILE, {})  # uid -> {"state": "idle"/"adding"/"set", "key": str|None}

# ==== –•–ï–õ–ü–ï–†–´ ====
def is_admin(uid): return uid in ADMINS

def value_emoji(val):
    return "üü©" if val == "–ß–ò–°–¢–û" else "üü•" if val == "–ì–†–Ø–ó–ù–û" else "‚¨ú"

def build_reply_two_cols(labels, tail_buttons=None):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for text in labels:
        row.append(types.KeyboardButton(text))
        if len(row) == 2:
            kb.row(*row); row = []
    if row: kb.row(*row)
    if tail_buttons and len(tail_buttons):
        kb.row(*[types.KeyboardButton(x) for x in tail_buttons])
    return kb

def admin_live_keyboard():
    # –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞ "üü© –°–û–õ–ï–î–ê–†", –≤ –∫–æ–Ω—Ü–µ ‚Äî "‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    labels = [f"{value_emoji(v['value'])} {name}" for name, v in menu.items()]
    return build_reply_two_cols(labels, ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])

def user_live_keyboard():
    labels = [f"{value_emoji(v['value'])} {name}" for name, v in menu.items()]
    return build_reply_two_cols(labels, ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])

def status_choice_keyboard():
    return build_reply_two_cols(["üü© –ß–ò–°–¢–û", "üü• –ì–†–Ø–ó–ù–û", "‚¨ú –ù–ï–ò–ó–í–ï–°–¢–ù–û"], ["‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞"])

def parse_item_button(text):
    # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç "üü© –°–û–õ–ï–î–ê–†" -> "–°–û–õ–ï–î–ê–†"
    return text.split(" ", 1)[1] if " " in text else text

def show_root(chat_id, uid):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üìç –†–∞–ø–∏—Ä–∞"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)

def show_rapira(chat_id, uid):
    kb = admin_live_keyboard() if is_admin(uid) else user_live_keyboard()
    bot.send_message(chat_id, "üìã –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã:", reply_markup=kb)

def save_state():
    save_json(DATA_FILE, menu)
    save_json(USERS_FILE, users)

# ==== –°–¢–ê–†–¢ ====
@bot.message_handler(commands=['start'])
def start(m):
    uid = m.from_user.id
    users.setdefault(uid, {"state": "idle", "key": None})
    save_json(USERS_FILE, users)
    show_root(m.chat.id, uid)

# ==== –†–£–¢-–ú–ï–ù–Æ ====
@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –†–∞–ø–∏—Ä–∞")
def on_rapira(m):
    show_rapira(m.chat.id, m.from_user.id)

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def on_back(m):
    users[m.from_user.id]["state"] = "idle"
    users[m.from_user.id]["key"] = None
    save_json(USERS_FILE, users)
    show_root(m.chat.id, m.from_user.id)

# ==== –î–û–ë–ê–í–ò–¢–¨ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, –≤—Å—ë —á–µ—Ä–µ–∑ ReplyKeyboard) ====
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def on_add(m):
    if not is_admin(m.from_user.id): return
    users[m.from_user.id]["state"] = "adding"
    users[m.from_user.id]["key"] = None
    save_json(USERS_FILE, users)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞"))
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞:", reply_markup=kb)

@bot.message_handler(func=lambda m: users.get(m.from_user.id, {}).get("state") == "adding")
def on_add_name(m):
    if m.text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞":
        users[m.from_user.id]["state"] = "idle"
        users[m.from_user.id]["key"] = None
        save_json(USERS_FILE, users)
        show_rapira(m.chat.id, m.from_user.id)
        return
    name = (m.text or "").strip()
    if not name:
        bot.send_message(m.chat.id, "‚ùó –ü—É—Å—Ç–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    if name in menu:
        bot.send_message(m.chat.id, "‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return
    menu[name] = {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None}
    users[m.from_user.id]["state"] = "idle"
    users[m.from_user.id]["key"] = None
    save_state()
    show_rapira(m.chat.id, m.from_user.id)

# ==== –í–´–ë–û–† –ü–£–ù–ö–¢–ê –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø (–∞–¥–º–∏–Ω) –∏–ª–∏ –ü–†–û–°–ú–û–¢–† (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ====
@bot.message_handler(func=lambda m: any(m.text.startswith(sym) for sym in ("üü©","üü•","‚¨ú")))
def on_item_click(m):
    uid = m.from_user.id
    name = parse_item_button(m.text)
    if name not in menu:
        # –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ç–∞—Ä–æ–π –∫–ª–∞–≤—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º
        show_rapira(m.chat.id, uid)
        return
    if is_admin(uid):
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ (—Ç–æ–∂–µ ReplyKeyboard)
        users[uid]["state"] = "set"
        users[uid]["key"] = name
        save_json(USERS_FILE, users)
        bot.send_message(m.chat.id, f"–ò–∑–º–µ–Ω—è–µ–º <b>{name}</b> (—Å–µ–π—á–∞—Å: {menu[name]['value']}). –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
                         reply_markup=status_choice_keyboard(), parse_mode="HTML")
    else:
        # —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
        show_rapira(m.chat.id, uid)

# ==== –£–°–¢–ê–ù–û–í–ö–ê –°–¢–ê–¢–£–°–ê (ReplyKeyboard) ====
@bot.message_handler(func=lambda m: users.get(m.from_user.id, {}).get("state") == "set")
def on_set_status(m):
    uid = m.from_user.id
    key = users[uid]["key"]
    if m.text == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞":
        users[uid]["state"] = "idle"; users[uid]["key"] = None
        save_json(USERS_FILE, users)
        show_rapira(m.chat.id, uid)
        return

    if m.text not in ("üü© –ß–ò–°–¢–û", "üü• –ì–†–Ø–ó–ù–û", "‚¨ú –ù–ï–ò–ó–í–ï–°–¢–ù–û"):
        bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return

    val = "–ß–ò–°–¢–û" if "–ß–ò–°–¢–û" in m.text else "–ì–†–Ø–ó–ù–û" if "–ì–†–Ø–ó–ù–û" in m.text else "–ù–ï–ò–ó–í–ï–°–¢–ù–û"
    menu[key] = {"value": val, "updated": now_str()}
    users[uid]["state"] = "idle"; users[uid]["key"] = None
    save_state()
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∂–∏–≤–æ–µ –º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è, —Å—Ç–∞—Ç—É—Å—ã —É–∂–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–Ω–æ–ø–æ–∫)
    show_rapira(m.chat.id, uid)

# ==== –§–û–õ–õ–ë–≠–ö ====
@bot.message_handler(func=lambda m: True)
def fallback(m):
    show_root(m.chat.id, m.from_user.id)

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (ReplyKeyboard, live-—Å—Ç–∞—Ç—É—Å—ã –≤ –∫–Ω–æ–ø–∫–∞—Ö, –±–µ–∑ –∏–Ω–ª–∞–π–Ω–∞).")
bot.infinity_polling(skip_pending=True)
