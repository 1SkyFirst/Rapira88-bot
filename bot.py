import os
import json
import threading
import psutil
import sys
from datetime import datetime
import pytz
import telebot
from telebot import types

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    print("‚ùå TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

os.makedirs("/data", exist_ok=True)
DATA_FILE = "/data/data.json" if os.path.exists("/data") else "data.json"
USERS_FILE = "/data/users.json" if os.path.exists("/data") else "users.json"
PORT = int(os.getenv("PORT", 8000))
ADMINS = [1088460844, 328477968, 7028005668]
TZ = pytz.timezone("Europe/Moscow")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# === –ê–ù–¢–ò–î–£–ë–õ–ò–ö–ê–¢ ===
def already_running():
    current = psutil.Process().pid
    for proc in psutil.process_iter(['pid', 'cmdline']):
        try:
            if proc.pid != current and 'python' in ' '.join(proc.info.get('cmdline') or []) and 'bot.py' in ' '.join(proc.info.get('cmdline') or []):
                return True
        except Exception:
            continue
    return False

if already_running():
    print("‚ö†Ô∏è Bot already running, exiting duplicate instance.")
    sys.exit(0)

# === KEEPALIVE (–¥–ª—è Timeweb) ===
def keepalive():
    from flask import Flask
    app = Flask(__name__)
    @app.route("/")
    def index(): return "Bot alive!", 200
    app.run(host="0.0.0.0", port=PORT)
threading.Thread(target=keepalive, daemon=True).start()

# === –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ===
DEFAULT_ITEMS = {
    "–°–û–õ–ï–î–ê–†": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–í–õ–ê–î–ò–ú–ò–†–û–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ü–û–ö–†–û–í–°–ö–û–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ë–ï–õ–ì–û–†–û–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–Ø–ö–û–í–õ–ï–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ü–û–ü–ê–°–ù–ê–Ø": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ö–ê–ú–´–®–ï–í–ê–•–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ë–ï–†–ï–°–¢–û–í–û–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–¢–†–ò–ü–û–õ–¨–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
}

def load_json(path, default):
    if not os.path.exists(path):
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False, indent=2)
        return default
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception:
        return default

    # –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    changed = False
    for k, v in list(data.items()):
        if isinstance(v, str):
            data[k] = {"value": v.strip(), "updated": None}
            changed = True
        elif isinstance(v, dict):
            if "value" not in v:
                v["value"] = "–Ω–µ –∑–∞–¥–∞–Ω–æ"
                changed = True
            if "updated" not in v:
                v["updated"] = None
                changed = True
    if changed:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    return data

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

menu_items = load_json(DATA_FILE, DEFAULT_ITEMS)
subscribers = load_json(USERS_FILE, [])

def save_data(): save_json(DATA_FILE, menu_items)
def save_users(): save_json(USERS_FILE, subscribers)
def is_admin(uid): return uid in ADMINS

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===
def status_emoji(val):
    v = (val or "").strip().upper()
    if v == "–ß–ò–°–¢–û": return "üü©"
    if v == "–ì–†–Ø–ó–ù–û": return "üü•"
    return "‚¨ú"

def build_keyboard(items, uid=None, admin_view=False):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for i, (name, info) in enumerate(items.items(), 1):
        label = f"{status_emoji(info['value'])} {name}"
        row.append(types.KeyboardButton(label))
        if len(row) == 2:
            kb.row(*row)
            row = []
    if row: kb.row(*row)

    # –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    if admin_view:
        kb.row(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"), types.KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å"))
        kb.row(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    else:
        if is_admin(uid):
            kb.row(types.KeyboardButton("‚öôÔ∏è –†–∞–ø–∏—Ä–∞"), types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"))
        else:
            kb.row(types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"))
    return kb

def send_menu(chat_id, uid=None, admin_view=False):
    kb = build_keyboard(menu_items, uid, admin_view)
    if admin_view:
        bot.send_message(chat_id, "üß∞ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n(–Ω–∞–∂–º–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞):", reply_markup=kb)
    else:
        bot.send_message(chat_id, "üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ:", reply_markup=kb)

# === –°–¢–ê–†–¢ / –û–ë–ù–û–í–ò–¢–¨ ===
def ensure_user(uid):
    if uid not in subscribers:
        subscribers.append(uid)
        save_users()

@bot.message_handler(commands=["start"])
def start(m):
    ensure_user(m.from_user.id)
    send_menu(m.chat.id, m.from_user.id)

@bot.message_handler(func=lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
def refresh(m):
    ensure_user(m.from_user.id)
    send_menu(m.chat.id, m.from_user.id)

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï ===
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_prompt(m):
    if not is_admin(m.from_user.id): return
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞:")
    bot.register_next_step_handler(m, add_new)

def add_new(m):
    key = m.text.strip().upper()
    if key in menu_items:
        bot.send_message(m.chat.id, "‚ö†Ô∏è –¢–∞–∫–æ–π –ø—É–Ω–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        menu_items[key] = {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None}
        save_data()
        bot.send_message(m.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É–Ω–∫—Ç <b>{key}</b>.")
    send_menu(m.chat.id, m.from_user.id, admin_view=True)

# === –£–î–ê–õ–ï–ù–ò–ï ===
delete_mode = {}

@bot.message_handler(func=lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å")
def delete_prompt(m):
    if not is_admin(m.from_user.id): return
    delete_mode[m.from_user.id] = True
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for i, name in enumerate(menu_items.keys(), 1):
        row.append(types.KeyboardButton(name))
        if len(row) == 2:
            kb.row(*row)
            row = []
    if row: kb.row(*row)
    kb.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    bot.send_message(m.chat.id, "üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@bot.message_handler(func=lambda m: delete_mode.get(m.from_user.id, False))
def delete_item(m):
    uid = m.from_user.id
    if m.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        delete_mode[uid] = False
        bot.send_message(m.chat.id, "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return send_menu(m.chat.id, uid, admin_view=True)

    key = m.text.strip().upper()
    if key not in menu_items:
        bot.send_message(m.chat.id, "‚ùó –¢–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ—Ç.")
    else:
        del menu_items[key]
        save_data()
        bot.send_message(m.chat.id, f"üóë –£–¥–∞–ª—ë–Ω –ø—É–Ω–∫—Ç <b>{key}</b>.")
    delete_mode[uid] = False
    send_menu(m.chat.id, uid, admin_view=True)

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===
@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –†–∞–ø–∏—Ä–∞")
def admin_panel(m):
    if not is_admin(m.from_user.id):
        return bot.send_message(m.chat.id, "üö´ –ù–µ—Ç –ø—Ä–∞–≤.")
    send_menu(m.chat.id, m.from_user.id, admin_view=True)

# === –ù–ê–ó–ê–î ===
@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back(m):
    bot.send_message(m.chat.id, "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é.")
    send_menu(m.chat.id, m.from_user.id)

# === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï / –ü–†–û–°–ú–û–¢–† ===
@bot.message_handler(func=lambda m: any(name in m.text for name in menu_items.keys()))
def toggle_status(m):
    uid = m.from_user.id
    key = next((name for name in menu_items if name in m.text), None)
    if not key:
        return

    if is_admin(uid) and any(btn in m.text for btn in ["üü©", "üü•", "‚¨ú"]):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        current = menu_items[key]["value"]
        new_val = "–ß–ò–°–¢–û" if current != "–ß–ò–°–¢–û" else "–ì–†–Ø–ó–ù–û"
        ts = datetime.now(TZ).strftime("%d.%m.%Y %H:%M")
        menu_items[key] = {"value": new_val, "updated": ts}
        save_data()

        emoji = status_emoji(new_val)
        text = f"{emoji} <b>{key}</b>: {new_val}\nüïì {ts}"
        for uid2 in list(subscribers):
            try:
                bot.send_message(uid2, text, parse_mode="HTML")
            except Exception as e:
                if "Forbidden" in str(e) or "bot was blocked" in str(e):
                    subscribers.remove(uid2)
                    save_users()

        bot.send_message(m.chat.id, f"üõ† {key}: {emoji} {new_val}")
        send_menu(m.chat.id, uid, admin_view=True)

    else:
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
        item = menu_items[key]
        val = item["value"]
        updated = item.get("updated")
        emoji = status_emoji(val)
        ts = f"\nüïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {updated}" if updated else ""
        bot.send_message(m.chat.id, f"{emoji} {key}: <b>{val}</b>{ts}")

# === –ü–†–û–ß–ï–ï ===
@bot.message_handler(func=lambda m: True)
def fallback(m):
    send_menu(m.chat.id, m.from_user.id)

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ –∫–Ω–æ–ø–∫–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ üõ† —Å–∏–º–≤–æ–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
bot.infinity_polling(skip_pending=True)
