import telebot
from telebot import types
import json, os
import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TOKEN")
ADMINS = [1088460844, 328477968, 7028005668]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—É–∑–Ω–∞—Ç—å —É @userinfobot)
DATA_FILE = "data.json"
ADMIN_BUTTON = "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# ====== –•–†–ê–ù–ò–õ–ö–ê ======
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    data = {
        "üß† –°–û–õ–ï–î–ê–†": "–î–û–ñ–î–¨",
        "üìÖ –í–õ–ê–î–ò–ú–ò–†–û–í–ö–ê": "–õ–ò–í–ï–ù–¨",
        "üìû –ü–û–ö–†–û–í–°–ö–û–ï": "–°–£–•–û",
        "üìû –ë–ï–õ–û–ì–û–†–õ–û–í–ö–ê": "–°–£–•–û",
        "üìû –Ø–ö–û–í–õ–ï–í–ö–ê": "–°–£–•–û",
        "üìû –ü–û–ü–ê–°–ù–ê–Ø": "–°–£–•–û",
        "üìû –ö–ê–ú–´–®–ï–í–ê–•–ê": "–°–£–•–û",
        "üìû –ë–ï–†–ï–°–¢–û–í–û–ï": "–°–£–•–û",
        "üí¨ –¢–†–ò–ü–û–õ–¨–ï": "–ü–æ–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç"
    }
    save_data(data)
    return data

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

menu_items = load_data()

def is_admin(uid: int) -> bool:
    return uid in ADMINS

# –ù–µ–±–æ–ª—å—à–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è ‚Äú–º–∞—Å—Ç–µ—Ä–∞‚Äù –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞
admin_sessions = {}  # uid -> {"mode": "add"/"edit"/"del", "key": str|None}

# ====== UI ======
def build_user_keyboard(is_admin_user: bool) -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for i, name in enumerate(menu_items.keys(), start=1):
        row.append(types.KeyboardButton(name))
        if i % 2 == 0:
            kb.row(*row); row = []
    if row:
        kb.row(*row)
    if is_admin_user:
        kb.row(types.KeyboardButton(ADMIN_BUTTON))
    return kb

def send_menu(chat_id: int, user_id: int):
    kb = build_user_keyboard(is_admin(user_id))
    bot.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=kb)

def admin_panel(chat_id: int):
    ikb = types.InlineKeyboardMarkup()
    ikb.row(
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="admin_edit"),
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_add"),
    )
    ikb.row(
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="admin_del"),
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="admin_list"),
    )
    ikb.row(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data="admin_refresh"))
    bot.send_message(chat_id, "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ikb)

def show_list(chat_id: int):
    lines = [f"‚Ä¢ <b>{k}</b>: {v}" for k, v in menu_items.items()]
    text = "üìã <b>–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏</b>:\n\n" + ("\n".join(lines) if lines else "–ø—É—Å—Ç–æ")
    bot.send_message(chat_id, text)

def ask_key_from_existing(chat_id: int, mode: str):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –æ—à–∏–±–∏—Ç—å—Å—è —Å —ç–º–æ–¥–∑–∏/–ø—Ä–æ–±–µ–ª–∞–º–∏
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    row = []
    for i, name in enumerate(menu_items.keys(), start=1):
        row.append(types.KeyboardButton(name))
        if i % 3 == 0:
            kb.row(*row); row = []
    if row: kb.row(*row)
    bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b> –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ¬´{mode}¬ª.", reply_markup=kb)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======
@bot.message_handler(commands=["start", "menu"])
def on_start(m: types.Message):
    send_menu(m.chat.id, m.from_user.id)

@bot.message_handler(commands=["admin"])
def on_admin_cmd(m: types.Message):
    if not is_admin(m.from_user.id):
        return bot.send_message(m.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
    admin_panel(m.chat.id)

@bot.message_handler(func=lambda m: m.text == ADMIN_BUTTON)
def on_admin_button(m: types.Message):
    if not is_admin(m.from_user.id):
        return bot.send_message(m.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
    admin_panel(m.chat.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("admin_"))
def on_admin_callbacks(c: types.CallbackQuery):
    uid = c.from_user.id
    if not is_admin(uid):
        bot.answer_callback_query(c.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    action = c.data[6:]
    if action == "list":
        bot.answer_callback_query(c.id)
        show_list(c.message.chat.id)

    elif action == "refresh":
        bot.answer_callback_query(c.id, "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        # –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–≤–µ–∂—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        send_menu(c.message.chat.id, uid)

    elif action == "add":
        bot.answer_callback_query(c.id)
        admin_sessions[uid] = {"mode": "add", "key": None}
        bot.send_message(
            c.message.chat.id,
            "‚ûï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏</b>.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>üó∫ –ö–∞—Ä—Ç–∞</code>"
        )
        bot.register_next_step_handler(c.message, step_add_key)

    elif action == "edit":
        bot.answer_callback_query(c.id)
        admin_sessions[uid] = {"mode": "edit", "key": None}
        ask_key_from_existing(c.message.chat.id, "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(c.message, step_edit_pick_key)

    elif action == "del":
        bot.answer_callback_query(c.id)
        admin_sessions[uid] = {"mode": "del", "key": None}
        ask_key_from_existing(c.message.chat.id, "üóë –£–¥–∞–ª–∏—Ç—å")
        bot.register_next_step_handler(c.message, step_del_pick_key)

# ====== –ú–ê–°–¢–ï–†: –î–û–ë–ê–í–õ–ï–ù–ò–ï ======
def step_add_key(m: types.Message):
    uid = m.from_user.id
    sess = admin_sessions.get(uid)
    if not sess or sess.get("mode") != "add":
        return
    key = (m.text or "").strip()
    if not key:
        bot.send_message(m.chat.id, "‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /admin ‚Üí ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª.")
        return
    if key in menu_items:
        bot.send_message(m.chat.id, "‚ö†Ô∏è –¢–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª.")
        return
    sess["key"] = key
    bot.send_message(m.chat.id, f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏</b> ¬´{key}¬ª.")
    bot.register_next_step_handler(m, step_add_value)

def step_add_value(m: types.Message):
    uid = m.from_user.id
    sess = admin_sessions.get(uid)
    if not sess or sess.get("mode") != "add" or not sess.get("key"):
        return
    value = (m.text or "").strip()
    if not value:
        bot.send_message(m.chat.id, "‚ùó –¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    menu_items[sess["key"]] = value
    save_data(menu_items)
    bot.send_message(m.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ <b>{sess['key']}</b>.")
    send_menu(m.chat.id, uid)
    admin_sessions.pop(uid, None)

# ====== –ú–ê–°–¢–ï–†: –ò–ó–ú–ï–ù–ï–ù–ò–ï ======
def step_edit_pick_key(m: types.Message):
    uid = m.from_user.id
    sess = admin_sessions.get(uid)
    if not sess or sess.get("mode") != "edit":
        return

    key = (m.text or "").strip()
    if key not in menu_items:
        bot.send_message(m.chat.id, "‚ùó –¢–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /admin ‚Üí ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª.")
        return

    sess["key"] = key

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
    ikb = types.InlineKeyboardMarkup()
    ikb.row(
        types.InlineKeyboardButton("‚úÖ –ß–ò–°–¢–û", callback_data=f"edit_clean|{key}"),
        types.InlineKeyboardButton("üí¶ –ì–†–Ø–ó–ù–û", callback_data=f"edit_dirty|{key}")
    )

    bot.send_message(
        m.chat.id,
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è <b>{key}</b>:\n\n<code>{menu_items[key]}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=ikb
    )

# ====== CALLBACK: –≤—ã–±–æ—Ä –ß–ò–°–¢–û / –ì–†–Ø–ó–ù–û ======
@bot.callback_query_handler(func=lambda c: c.data.startswith("edit_"))
def on_edit_choice(c: types.CallbackQuery):
    uid = c.from_user.id
    if not is_admin(uid):
        bot.answer_callback_query(c.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
        return

    action, key = c.data.split("|", 1)
    if key not in menu_items:
        bot.answer_callback_query(c.id, "–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if action == "edit_clean":
        new_value = "–ß–ò–°–¢–û"
    elif action == "edit_dirty":
        new_value = "–ì–†–Ø–ó–ù–û"
    else:
        bot.answer_callback_query(c.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    menu_items[key] = new_value
    save_data(menu_items)
    bot.answer_callback_query(c.id, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {key} = {new_value}")
    bot.send_message(c.message.chat.id, f"‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è <b>{key}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{new_value}</b>.")

    # –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    send_menu(c.message.chat.id, uid)
    admin_sessions.pop(uid, None)


# ====== –ú–ê–°–¢–ï–†: –£–î–ê–õ–ï–ù–ò–ï ======
def step_del_pick_key(m: types.Message):
    uid = m.from_user.id
    sess = admin_sessions.get(uid)
    if not sess or sess.get("mode") != "del":
        return
    key = (m.text or "").strip()
    if key not in menu_items:
        bot.send_message(m.chat.id, "‚ùó –¢–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /admin ‚Üí ¬´–£–¥–∞–ª–∏—Ç—å¬ª.")
        return
    del menu_items[key]
    save_data(menu_items)
    bot.send_message(m.chat.id, f"üóë –ö–Ω–æ–ø–∫–∞ <b>{key}</b> —É–¥–∞–ª–µ–Ω–∞.")
    send_menu(m.chat.id, uid)
    admin_sessions.pop(uid, None)

# ====== –û–ë–´–ß–ù–´–ï –ö–ù–û–ü–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ======
@bot.message_handler(func=lambda m: m.text in menu_items)
def show_value(m: types.Message):
    bot.send_message(m.chat.id, str(menu_items[m.text]))

@bot.message_handler(func=lambda m: True)
def fallback(m: types.Message):
    # –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    send_menu(m.chat.id, m.from_user.id)
def keepalive():
    port = int(os.getenv("PORT", 8000))
    server = HTTPServer(("0.0.0.0", port), SimpleHTTPRequestHandler)

threading.Thread(target=keepalive, daemon=True).start()

# ====== –ó–ê–ü–£–°–ö ======
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling(skip_pending=True)

