import telebot
import json
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TOKEN")
ADMINS = [1088460844, 328477968, 7028005668]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—É–∑–Ω–∞—Ç—å —É @userinfobot)
DATA_FILE = "data.json"

bot = telebot.TeleBot(TOKEN)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é ===
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        menu_items = json.load(f)
else:
    menu_items = {
        "–°–û–õ–ï–î–ê–†": "–î–û–ñ–î–¨",
        "–í–õ–ê–î–ò–ú–ò–†–û–í–ö–ê": "–õ–ò–í–ï–ù–¨",
        "–ü–û–ü–ê–°–ù–ê–Ø": "–°–£–•–û",
        "–Ø–ö–û–í–õ–ï–í–ö–ê": "–ü–æ–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç üòä"
    }

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(menu_items, f, ensure_ascii=False, indent=2)

def is_admin(uid): return uid in ADMINS

@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for name in menu_items.keys():
        markup.add(telebot.types.KeyboardButton(name))
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in menu_items)
def show(m): bot.send_message(m.chat.id, menu_items[m.text])

# === /set –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ —ç–º–æ–¥–∑–∏ ===
@bot.message_handler(commands=['set'])
def set_item(message):
    if not is_admin(message.from_user.id):
        return bot.send_message(message.chat.id, "üö´ –ù–µ—Ç –ø—Ä–∞–≤.")

    try:
        _, rest = message.text.split(" ", 1)
    except ValueError:
        return bot.send_message(message.chat.id, "‚ùó –§–æ—Ä–º–∞—Ç: /set <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")

    # –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏)
    found = None
    for key in menu_items.keys():
        if rest.startswith(key):
            found = key
            break

    if not found:
        return bot.send_message(message.chat.id, "‚ùó –¢–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –Ω–æ–≤–æ–π.")

    new_text = rest[len(found):].strip()
    if not new_text:
        return bot.send_message(message.chat.id, "‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏.")

    menu_items[found] = new_text
    save_data()
    bot.send_message(message.chat.id, f"‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è '{found}' –æ–±–Ω–æ–≤–ª—ë–Ω.")

# === /add —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã ===
@bot.message_handler(commands=['add'])
def add_item(message):
    if not is_admin(message.from_user.id):
        return bot.send_message(message.chat.id, "üö´ –ù–µ—Ç –ø—Ä–∞–≤.")

    try:
        _, rest = message.text.split(" ", 1)
    except ValueError:
        return bot.send_message(message.chat.id, "‚ùó –§–æ—Ä–º–∞—Ç: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ç–µ–∫—Å—Ç>")
    
    parts = rest.strip().split(" ", 1)
    if len(parts) < 2:
        return bot.send_message(message.chat.id, "‚ùó –§–æ—Ä–º–∞—Ç: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ç–µ–∫—Å—Ç>")

    key, text = parts[0], parts[1]
    if key in menu_items:
        return bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

    menu_items[key] = text
    save_data()
    bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ '{key}'.")

bot.infinity_polling()
