import os
import json
import threading
import psutil
import sys
import time
from datetime import datetime
import telebot
from telebot import types

# üïí –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
os.environ['TZ'] = 'Europe/Moscow'
try:
    time.tzset()
except Exception:
    pass

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    print("‚ùå TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

# === /data –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è (Timeweb Apps) ===
os.makedirs("/data", exist_ok=True)
DATA_FILE = "/data/data.json" if os.path.exists("/data") else "data.json"
USERS_FILE = "/data/users.json" if os.path.exists("/data") else "users.json"
PORT = int(os.getenv("PORT", 8000))
ADMINS = [1088460844, 328477968, 7028005668]

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
admin_sessions = {}

# === KEEPALIVE –¥–ª—è Timeweb ===
def keepalive():
    from flask import Flask
    app = Flask(__name__)
    @app.route("/")
    def index(): return "Bot is alive!", 200
    app.run(host="0.0.0.0", port=PORT)
threading.Thread(target=keepalive, daemon=True).start()

# === –î–ê–ù–ù–´–ï ===
DEFAULT_ITEMS = {
    "–°–û–õ–ï–î–ê–†": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–í–õ–ê–î–ò–ú–ò–†–û–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ü–û–ö–†–û–í–°–ö–û–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ë–ï–õ–ì–û–†–û–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–Ø–ö–û–í–õ–ï–í–ö–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ü–û–ü–ê–°–ù–ê–Ø": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ö–ê–ú–´–®–ï–í–ê–•–ê": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–ë–ï–†–ï–°–¢–û–í–û–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None},
    "–¢–†–ò–ü–û–õ–¨–ï": {"value": "–Ω–µ –∑–∞–¥–∞–Ω–æ", "updated": None}
}

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
def load_json(path, default):
    if not os.path.exists(path):
        save_json(path, default)
        return default
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

menu_items = load_json(DATA_FILE, DEFAULT_ITEMS)
subscribers = load_json(USERS_FILE, [])

# === –ê–í–¢–û–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ß–ò–ö–û–í ===
def ensure_subscribers_persistent():
    if not subscribers and os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                old_data = json.load(f)
                if old_data:
                    subscribers.extend(old_data)
                    print("‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞.")
        except Exception:
            pass
    for admin in ADMINS:
        if admin not in subscribers:
            subscribers.append(admin)
    save_json(USERS_FILE, subscribers)
    print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")

ensure_subscribers_persistent()

def save_data(): save_json(DATA_FILE, menu_items)
def save_users(): save_json(USERS_FILE, subscribers)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===
def is_admin(uid): return uid in ADMINS

def emoji_for(val):
    if val == "–ß–ò–°–¢–û": return "üü©"
    if val == "–ì–†–Ø–ó–ù–û": return "üü•"
    return "‚¨ú"

def auto_subscribe(user_id):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ"""
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_users()
        print(f"‚ûï –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞: {user_id}")

def send_menu(chat_id, uid=None):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for i, name in enumerate(menu_items.keys(), 1):
        row.append(types.KeyboardButton(name))
        if len(row) == 2: kb.row(*row); row = []
    if row: kb.row(*row)
    if is_admin(uid): kb.row(types.KeyboardButton("‚öôÔ∏è –†–∞–ø–∏—Ä–∞"))
    bot.send_message(chat_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=kb)

# === –°–¢–ê–†–¢ ===
@bot.message_handler(commands=['start'])
def start(m):
    auto_subscribe(m.from_user.id)
    send_menu(m.chat.id, m.from_user.id)

# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===
@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –†–∞–ø–∏—Ä–∞")
def admin_panel(m):
    auto_subscribe(m.from_user.id)
    if not is_admin(m.from_user.id):
        return bot.send_message(m.chat.id, "üö´ –ù–µ—Ç –ø—Ä–∞–≤.")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"))
    kb.row(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(m.chat.id, "üõ†Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –†–∞–ø–∏—Ä–∞:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back(m):
    admin_sessions.pop(m.from_user.id, None)
    send_menu(m.chat.id, m.from_user.id)

# === –ò–ó–ú–ï–ù–ï–ù–ò–ï (—Å–ø–∏—Å–æ–∫ —Å —Ü–≤–µ—Ç–∞–º–∏) ===
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
def edit_list(m):
    auto_subscribe(m.from_user.id)
    if not is_admin(m.from_user.id): return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for i, (name, info) in enumerate(menu_items.items(), 1):
        label = f"{emoji_for(info['value'])} {name}"
        row.append(types.KeyboardButton(label))
        if len(row) == 2: kb.row(*row); row = []
    if row: kb.row(*row)
    kb.row(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(m.chat.id, "üß© –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å:", reply_markup=kb)
    admin_sessions[m.from_user.id] = {"mode": "toggle"}

# === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê (—Ç–æ–ª—å–∫–æ –ß–ò–°–¢–û/–ì–†–Ø–ó–ù–û) ===
@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and admin_sessions.get(m.from_user.id, {}).get("mode") == "toggle")
def toggle_status(m):
    auto_subscribe(m.from_user.id)
    text = m.text.strip()
    name = text.replace("üü©","").replace("üü•","").replace("‚¨ú","").strip()
    if name not in menu_items:
        return bot.send_message(m.chat.id, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–Ω–∫—Ç.")
    current = menu_items[name]["value"]

    # –µ—Å–ª–∏ "–Ω–µ –∑–∞–¥–∞–Ω–æ" ‚Äî —Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ß–ò–°–¢–û"
    if current == "–Ω–µ –∑–∞–¥–∞–Ω–æ":
        new_val = "–ß–ò–°–¢–û"
    else:
        new_val = "–ì–†–Ø–ó–ù–û" if current == "–ß–ò–°–¢–û" else "–ß–ò–°–¢–û"

    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
    menu_items[name] = {"value": new_val, "updated": timestamp}
    save_data()

    emoji = emoji_for(new_val)
    text_msg = f"{emoji} <b>{name}</b>: {new_val}\nüïì {timestamp}"
    for uid in list(subscribers):
        try:
            bot.send_message(uid, text_msg, parse_mode="HTML")
        except Exception as e:
            if "Forbidden" in str(e):
                subscribers.remove(uid)
                save_users()

    bot.send_message(m.chat.id, f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {emoji} <b>{name}</b> ‚Üí {new_val}", parse_mode="HTML")
    edit_list(m)

# === –ü–†–û–°–ú–û–¢–† ===
@bot.message_handler(func=lambda m: m.text.replace("üü©","").replace("üü•","").replace("‚¨ú","").strip() in menu_items)
def show_item(m):
    auto_subscribe(m.from_user.id)
    key = m.text.replace("üü©","").replace("üü•","").replace("‚¨ú","").strip()
    item = menu_items[key]
    val, updated = item["value"], item["updated"]
    emoji = emoji_for(val)
    if updated:
        bot.send_message(m.chat.id, f"{emoji} {key}: <b>{val}</b>\nüïì –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {updated}")
    else:
        bot.send_message(m.chat.id, f"{emoji} {key}: <b>{val}</b>\nüïì –ï—â—ë –Ω–µ –∏–∑–º–µ–Ω—è–ª–æ—Å—å")

# === –ü–†–û–ß–ï–ï ===
@bot.message_handler(func=lambda m: True)
def fallback(m):
    auto_subscribe(m.from_user.id)
    bot.send_message(m.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
    send_menu(m.chat.id, m.from_user.id)

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (‚öôÔ∏è –†–∞–ø–∏—Ä–∞, –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –≤—Å–µ—Ö, —Ç–æ–ª—å–∫–æ –ß–ò–°–¢–û/–ì–†–Ø–ó–ù–û, –¥–∞–Ω–Ω—ã–µ –≤ /data).")
bot.infinity_polling(skip_pending=True)
