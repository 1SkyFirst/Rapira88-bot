import os
import json
import threading
import psutil
import sys
from http.server import SimpleHTTPRequestHandler, HTTPServer
import telebot
from telebot import types

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = os.getenv("TOKEN")
DATA_FILE = "data.json"
PORT = int(os.getenv("PORT", 8000))
ADMINS = [1088460844, 328477968, 7028005668]  # üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã

bot = telebot.TeleBot(TOKEN)
admin_sessions = {}

# ====== –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í ======
def already_running():
    current = psutil.Process().pid
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        if proc.pid != current and 'python' in proc.name() and 'bot.py' in str(proc.cmdline()):
            return True
    return False

if already_running():
    print("‚ö†Ô∏è Bot already running, exiting duplicate instance.")
    sys.exit(0)

# ====== KEEPALIVE ======
def keepalive():
    server = HTTPServer(("0.0.0.0", PORT), SimpleHTTPRequestHandler)
    server.serve_forever()

threading.Thread(target=keepalive, daemon=True).start()

# ====== –î–ê–ù–ù–´–ï ======
def load_data():
    default_items = {
        "–°–û–õ–ï–î–ê–†": "–Ω–µ –∑–∞–¥–∞–Ω–æ",
        "–í–õ–ê–î–ò–ú–ò–†–û–í–ö–ê": "–Ω–µ –∑–∞–¥–∞–Ω–æ",
        "–ü–û–ö–†–û–í–°–ö–û–ï": "–Ω–µ –∑–∞–¥–∞–Ω–æ",
        "–ë–ï–õ–ì–û–†–û–í–ö–ê": "–Ω–µ –∑–∞–¥–∞–Ω–æ",
        "–Ø–ö–û–í–õ–ï–í–ö–ê": "–Ω–µ –∑–∞–¥–∞–Ω–æ",
        "–ü–û–ü–ê–°–ù–ê–Ø": "–Ω–µ –∑–∞–¥–∞–Ω–æ",
        "–ö–ê–ú–´–®–ï–í–ê–•–ê": "–Ω–µ –∑–∞–¥–∞–Ω–æ",
        "–ë–ï–†–ï–°–¢–û–í–û–ï": "–Ω–µ –∑–∞–¥–∞–Ω–æ",
        "–¢–†–ò–ü–û–õ–¨–ï": "–Ω–µ –∑–∞–¥–∞–Ω–æ"
    }
    if not os.path.exists(DATA_FILE):
        print("üÜï –°–æ–∑–¥–∞—é data.json —Å —à–∞–±–ª–æ–Ω–æ–º.")
        save_data(default_items)
        return default_items
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ
            for k, v in default_items.items():
                if k not in data:
                    data[k] = v
            save_data(data)
            return data
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è data.json:", e)
        save_data(default_items)
        return default_items

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

menu_items = load_data()

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ======
def is_admin(uid): return uid in ADMINS

def send_menu(chat_id, uid=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for k in menu_items.keys():
        markup.add(types.KeyboardButton(k))
    if is_admin(uid):
        markup.add(types.KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    bot.send_message(chat_id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=markup)

# ====== –°–¢–ê–†–¢ ======
@bot.message_handler(commands=['start'])
def start(m):
    send_menu(m.chat.id, m.from_user.id)

# ====== –ü–†–û–°–ú–û–¢–† ======
@bot.message_handler(func=lambda m: m.text in menu_items)
def show_item(m):
    text = f"{m.text}: <b>{menu_items[m.text]}</b>"
    bot.send_message(m.chat.id, text, parse_mode="HTML")

# ====== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ======
@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def admin_panel(m):
    if not is_admin(m.from_user.id):
        return bot.send_message(m.chat.id, "üö´ –ù–µ—Ç –ø—Ä–∞–≤.")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(m.chat.id, "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back(m):
    send_menu(m.chat.id, m.from_user.id)

# ====== –î–û–ë–ê–í–õ–ï–ù–ò–ï ======
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
def add_prompt(m):
    if not is_admin(m.from_user.id): return
    admin_sessions[m.from_user.id] = {"mode": "add"}
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏:")

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and admin_sessions.get(m.from_user.id, {}).get("mode") == "add")
def add_new(m):
    key = m.text.strip()
    if key in menu_items:
        bot.send_message(m.chat.id, "‚ö†Ô∏è –¢–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å.")
    else:
        menu_items[key] = "–Ω–µ –∑–∞–¥–∞–Ω–æ"
        save_data(menu_items)
        bot.send_message(m.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '{key}'.")
    admin_sessions.pop(m.from_user.id, None)
    send_menu(m.chat.id, m.from_user.id)

# ====== –ò–ó–ú–ï–ù–ï–ù–ò–ï ======
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
def edit_prompt(m):
    if not is_admin(m.from_user.id): return
    admin_sessions[m.from_user.id] = {"mode": "edit"}
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for k in menu_items.keys():
        kb.add(types.KeyboardButton(k))
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=kb)

@bot.message_handler(func=lambda m: is_admin(m.from_user.id) and admin_sessions.get(m.from_user.id, {}).get("mode") == "edit")
def edit_item(m):
    key = m.text.strip()
    if key not in menu_items:
        return bot.send_message(m.chat.id, "‚ùó –¢–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç.")
    ikb = types.InlineKeyboardMarkup()
    ikb.row(
        types.InlineKeyboardButton("‚úÖ –ß–ò–°–¢–û", callback_data=f"set|{key}|–ß–ò–°–¢–û"),
        types.InlineKeyboardButton("üí¶ –ì–†–Ø–ó–ù–û", callback_data=f"set|{key}|–ì–†–Ø–ó–ù–û")
    )
    bot.send_message(
        m.chat.id,
        f"–ò–∑–º–µ–Ω—è–µ–º <b>{key}</b>:\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî <b>{menu_items[key]}</b>",
        parse_mode="HTML",
        reply_markup=ikb
    )

# ====== INLINE CALLBACK ======
@bot.callback_query_handler(func=lambda c: c.data.startswith("set|"))
def on_set(c):
    try:
        _, key, val = c.data.split("|", 2)
        if key not in menu_items:
            return bot.answer_callback_query(c.id, "–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        menu_items[key] = val
        save_data(menu_items)
        bot.answer_callback_query(c.id, f"{key} ‚Üí {val}")
        bot.send_message(c.message.chat.id, f"‚úÖ {key}: {val}")
        send_menu(c.message.chat.id, c.from_user.id)
        admin_sessions.pop(c.from_user.id, None)
    except Exception as e:
        bot.answer_callback_query(c.id, f"–û—à–∏–±–∫–∞: {e}")

# ====== –ü–†–û–ß–ï–ï ======
@bot.message_handler(func=lambda m: True)
def fallback(m):
    bot.send_message(m.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
    send_menu(m.chat.id, m.from_user.id)

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.infinity_polling(skip_pending=True)
