import telebot
import json
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TOKEN")
ADMINS = [1088460844, 328477968]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—É–∑–Ω–∞—Ç—å —É @userinfobot)
DATA_FILE = "data.json"

bot = telebot.TeleBot(TOKEN)

# === –ó–∞–≥—Ä—É–∑–∫–∞/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é ===
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        menu_items = json.load(f)
else:
    menu_items = {
        "üß† –°–û–õ–ï–î–ê–†": "–î–û–ñ–î–¨",
        "üìÖ –í–õ–ê–î–ò–ú–ò–†–û–í–ö–ê": "–õ–ò–í–ï–ù–¨",
        "üìû –ü–û–ü–ê–°–ù–ê–Ø": "–°–£–•–û",
        "üí¨ –Ø–ö–û–í–õ–ï–í–ö–ê": "–ü–æ–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç üòä"
    }
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(menu_items, f, ensure_ascii=False, indent=2)


# === /start ===
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for item in menu_items.keys():
        markup.add(telebot.types.KeyboardButton(item))
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=markup)


# === –í—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π ===
@bot.message_handler(func=lambda message: message.text in menu_items.keys())
def show_info(message):
    bot.send_message(message.chat.id, menu_items[message.text])


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
def is_admin(user_id):
    return user_id in ADMINS


# === /set: –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏ ===
@bot.message_handler(commands=['set'])
def set_value(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        bot.send_message(message.chat.id, "‚ùó –§–æ—Ä–º–∞—Ç: /set <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏> <–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç>")
        return

    key, value = parts[1], parts[2]
    if key not in menu_items:
        bot.send_message(message.chat.id, "‚ùó –¢–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π.")
        return

    menu_items[key] = value
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(menu_items, f, ensure_ascii=False, indent=2)

    bot.send_message(message.chat.id, f"‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è '{key}' –æ–±–Ω–æ–≤–ª—ë–Ω.")


# === /add: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É ===
@bot.message_handler(commands=['add'])
def add_button(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return

    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        bot.send_message(message.chat.id, "‚ùó –§–æ—Ä–º–∞—Ç: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–Ω–æ–ø–∫–∏> <—Ç–µ–∫—Å—Ç>")
        return

    key, value = parts[1], parts[2]
    if key in menu_items:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    menu_items[key] = value
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(menu_items, f, ensure_ascii=False, indent=2)

    bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ '{key}'.")

# === /list: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===
@bot.message_handler(commands=['list'])
def list_buttons(message):
    if not is_admin(message.from_user.id):
        return
    text = "üìã –¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:\n\n" + "\n".join([f"{k}: {v}" for k, v in menu_items.items()])
    bot.send_message(message.chat.id, text)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–µ–≥–æ ===
@bot.message_handler(func=lambda message: True)
def unknown(message):
    bot.send_message(message.chat.id, "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


# === –ó–∞–ø—É—Å–∫ ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.infinity_polling()
